0_100010_00000_00000000000000000011 //MOVI R0=20'd3
0_011100_00000_00000_00001_00_00001010	//SW M3=R0
0_011100_00001_00000_00001_00_00000010	//LW R1=M3  		=> R1=3
0_100000_00000_00000_00000_00000_01001	//NOP
0_101000_00001_00001_000000000001001	//ADDI R1=R1+4'b1001=> R1=12(4'b1100)
0_101100_00000_00000_000000000000100	//ORI R0=R0|4'b0100	=> R0=7
0_101011_00001_00001_000000000001010	//XORI R1=R1^4'b1010=> R1=6
0_100000_00001_00000_00001_00000_00000	//ADD R1 = R0 + R1	=> R1=13
0_100000_00001_00001_00000_00000_00001	//SUB R1 = R1 - R0	=> R1=6
0_100000_00001_00001_00000_00000_00010	//AND R1 = R1 & R0	=> R1=6
0_011100_00001_00000_00001_01_00001010	//SW M19 = R1		
0_011100_00010_00000_00001_01_00000010	//LW R2 = M19		=> R2=6
0_100000_00010_00001_00000_00000_00100	//OR R2 = R1 | R0	=> R2=7
0_100000_00010_00010_00001_00000_00011	//XOR R2 = R2 ^ R1	=> R2=1
0_100000_00011_00010_00100_00000_01000	//SLLI R3 = R2 << 4 => R3=16
0_100000_00100_00011_00100_00000_01001	//SRLI R4 = R3 >> 4 => R4=1
0_100000_00110_00100_11111_00000_01011	//ROTRI R6 = R4 >> 31 => R6=2
0_000010_00101_00000_000000000000011	//LWI R5 = MEM[R0 + (3 << 2)], R5 = MEM[19] => R5=6
0_001010_00101_00000_000000000000100	//SWI MEM[R0 + (4 << 2)] = R5, MEM[23] = R5 => MEM[23]=6
0_100100_0_000000000000000000000010	//J PC = PC + (2 << 1)
0_100010_00111_00000000000000000011 //MOVI R7=20'd3
0_100010_01000_00000000000000000011 //MOVI R8=20'd3
0_100010_01001_00000000000000000011 //MOVI R9=20'd3
0_100010_01010_00000000000000000011 //MOVI R10=20'd3
0_100010_01011_00000000000000000011 //MOVI R11=20'd4
0_100110_01010_01011_0_00000000000010	//BEQ if(R10==R11) PC = PC + (2 << 1)
0_100010_01100_00000000000000000011 //MOVI R12=20'd3
0_100010_01101_00000000000000000011 //MOVI R13=20'd3
0_100000_00000_00000_00000_00000_01001	//NOP
0_100110_01010_01011_1_00000000000001	//BNE if(R10!=R11) PC = PC + (1 << 1)
0_100010_01110_00000000000000000011 //MOVI R14=20'd3
0_100000_00000_00000_00000_00000_01001	//NOP

